const { Scenes: { BaseScene } } = require('telegraf')
const tomorrow = new BaseScene('tomorrow');
const fs = require('fs')

tomorrow.enter((ctx) => {
    ctx.tg.deleteMessage(ctx.chat.id, ctx.update.callback_query.message.message_id)
    const date = new Date()
    const tomorrowNumber = date.getDay() + 1
    switch (tomorrowNumber) {
        case (1): ctx.session.userWeekdayTomorrow = 'pn'
            break
        case (2): ctx.session.userWeekdayTomorrow = 'vt'
            break
        case (3): ctx.session.userWeekdayTomorrow = 'sr'
            break
        case (4): ctx.session.userWeekdayTomorrow = 'ch'
            break
        case (5): ctx.session.userWeekdayTomorrow = 'pt'
            break
        case (6): ctx.session.userWeekdayTomorrow = 'sb'
            break
        case (7): ctx.session.userWeekdayTomorrow = 'vs'
            break
    }
    var shedulePhotoPath = `src/screenshots/${ctx.session.userBuilding}/${ctx.session.userShift}/${ctx.session.userWeekdayTomorrow}.jpeg`
    if (ctx.session.userBuilding && ctx.session.userShift && ctx.session.userWeekday) {
        var shedulePhoto = fs.readFileSync(shedulePhotoPath)
        var building = 1
        var weekday = ''
        switch (ctx.session.userBuilding) {
            case ('A'): building = 1
                break
            case ('B'): building = 2
                break
        }
        switch (ctx.session.userWeekdayTomorrow) {
            case ('pn'): weekday = '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
                break
            case ('vt'): weekday = '–≤—Ç–æ—Ä–Ω–∏–∫'
                break
            case ('sr'): weekday = '—Å—Ä–µ–¥—É'
                break
            case ('ch'): weekday = '—á–µ—Ç–≤–µ—Ä–≥'
                break
            case ('pt'): weekday = '–ø—è—Ç–Ω–∏—Ü—É'
                break
            case ('sb'): weekday = '—Å—É–±–±–æ—Ç—É'
                break
            case ('vs'): weekday = '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                break
        }
        if (ctx.session.notShakal) {
            ctx.tg.sendDocument(ctx.chat.id, { source: shedulePhoto, filename: `${Math.random() * 1000}.jpeg` }, { caption: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${building} –∫–æ—Ä–ø—É—Å–∞ , ${ctx.session.userShift} —Å–º–µ–Ω—ã –Ω–∞ ${weekday}` })
            setTimeout(() => {
                ctx.tg.sendMessage(ctx.chat.id, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: `‚úèÔ∏è  –û–±–Ω–æ–≤–∏—Ç—å ‚úèÔ∏è `, callback_data: 'userWeekdayToday' },
                            ],
                            [
                                { text: `üìí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üìí`, callback_data: 'userWeekdayTomorrow' },
                            ],
                            [
                                { text: `‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è`, callback_data: 'changeSettings' },
                            ],
                            [
                                { text: `üìÖ –°–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ üìÖ`, callback_data: 'changeWeekday' },
                            ],
                            [
                                { text: `üíµ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ üíµ`, callback_data: 'supportAuthor' },
                            ]
                        ]
                    }
                })
            }, 1300)
        }
        else {
            ctx.tg.sendPhoto(ctx.chat.id, { source: shedulePhoto }, { caption: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${building} –∫–æ—Ä–ø—É—Å–∞ , ${ctx.session.userShift} —Å–º–µ–Ω—ã –Ω–∞ ${weekday}` })
            setTimeout(() => {
                ctx.tg.sendMessage(ctx.chat.id, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: `‚úèÔ∏è  –û–±–Ω–æ–≤–∏—Ç—å ‚úèÔ∏è `, callback_data: 'userWeekdayToday' },
                            ],
                            [
                                { text: `üìí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üìí`, callback_data: 'userWeekdayTomorrow' },
                            ],
                            [
                                { text: `‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è`, callback_data: 'changeSettings' },
                            ],
                            [
                                { text: `üìÖ –°–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ üìÖ`, callback_data: 'changeWeekday' },
                            ],
                            [
                                { text: `üíµ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ üíµ`, callback_data: 'supportAuthor' },
                            ]
                        ]
                    }
                })
            }, 1300)
        }
    }
    else {
        ctx.tg.sendMessage(ctx.chat.id, 'üîß–û–±–Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏üîß', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: `‚öôÔ∏è –û–±–Ω–æ–≤–∏—Ç—å ‚öôÔ∏è`, callback_data: 'changeSettings' },
                    ]
                ]
            }
        })
    }
    ctx.scene.leave('tomorrow')
})
module.exports = tomorrow